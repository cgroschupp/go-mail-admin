// Package openapiadmin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapiadmin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for TLSPolicyPolicy.
const (
	TLSPolicyPolicyDane        TLSPolicyPolicy = "dane"
	TLSPolicyPolicyDaneOnly    TLSPolicyPolicy = "dane-only"
	TLSPolicyPolicyEncrypt     TLSPolicyPolicy = "encrypt"
	TLSPolicyPolicyFingerprint TLSPolicyPolicy = "fingerprint"
	TLSPolicyPolicyMay         TLSPolicyPolicy = "may"
	TLSPolicyPolicyNone        TLSPolicyPolicy = "none"
	TLSPolicyPolicySecure      TLSPolicyPolicy = "secure"
	TLSPolicyPolicyVerify      TLSPolicyPolicy = "verify"
)

// Defines values for TLSPolicyMergePatchUpdatePolicy.
const (
	TLSPolicyMergePatchUpdatePolicyDane        TLSPolicyMergePatchUpdatePolicy = "dane"
	TLSPolicyMergePatchUpdatePolicyDaneOnly    TLSPolicyMergePatchUpdatePolicy = "dane-only"
	TLSPolicyMergePatchUpdatePolicyEncrypt     TLSPolicyMergePatchUpdatePolicy = "encrypt"
	TLSPolicyMergePatchUpdatePolicyFingerprint TLSPolicyMergePatchUpdatePolicy = "fingerprint"
	TLSPolicyMergePatchUpdatePolicyMay         TLSPolicyMergePatchUpdatePolicy = "may"
	TLSPolicyMergePatchUpdatePolicyNone        TLSPolicyMergePatchUpdatePolicy = "none"
	TLSPolicyMergePatchUpdatePolicySecure      TLSPolicyMergePatchUpdatePolicy = "secure"
	TLSPolicyMergePatchUpdatePolicyVerify      TLSPolicyMergePatchUpdatePolicy = "verify"
)

// Account defines model for Account.
type Account struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Domain    *Domain    `json:"domain,omitempty"`
	DomainId  int32      `json:"domain_id"`
	Enabled   *bool      `json:"enabled,omitempty"`
	Id        *int32     `json:"id,omitempty"`
	Quota     *int32     `json:"quota,omitempty"`
	Sendonly  *bool      `json:"sendonly,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Username  string     `json:"username"`
}

// AccountCreate defines model for AccountCreate.
type AccountCreate struct {
	DomainId int32  `json:"domain_id"`
	Enabled  *bool  `json:"enabled,omitempty"`
	Password string `json:"password"`
	Quota    *int32 `json:"quota,omitempty"`
	Sendonly *bool  `json:"sendonly,omitempty"`
	Username string `json:"username"`
}

// AccountList defines model for AccountList.
type AccountList struct {
	Items []Account `json:"items"`
}

// AccountMergePatchUpdate defines model for AccountMergePatchUpdate.
type AccountMergePatchUpdate struct {
	Enabled  *bool   `json:"enabled"`
	Password *string `json:"password,omitempty"`
	Quota    *int32  `json:"quota"`
	Sendonly *bool   `json:"sendonly"`
	Username *string `json:"username,omitempty"`
}

// Alias defines model for Alias.
type Alias struct {
	CreatedAt           *time.Time `json:"created_at,omitempty"`
	DestinationDisplay  *string    `json:"destination_display,omitempty"`
	DestinationDomain   string     `json:"destination_domain"`
	DestinationUsername string     `json:"destination_username"`
	Enabled             bool       `json:"enabled"`
	Id                  *int32     `json:"id,omitempty"`
	SourceDisplay       *string    `json:"source_display,omitempty"`
	SourceDomain        *Domain    `json:"source_domain,omitempty"`
	SourceDomainId      int32      `json:"source_domain_id"`
	SourceUsername      *string    `json:"source_username,omitempty"`
	UpdatedAt           *time.Time `json:"updated_at,omitempty"`
}

// AliasList defines model for AliasList.
type AliasList struct {
	Items []Alias `json:"items"`
}

// AliasMergePatchUpdate defines model for AliasMergePatchUpdate.
type AliasMergePatchUpdate struct {
	DestinationDomain   *string `json:"destination_domain,omitempty"`
	DestinationUsername *string `json:"destination_username,omitempty"`
	Enabled             *bool   `json:"enabled,omitempty"`
	SourceDomainId      *int32  `json:"source_domain_id,omitempty"`
	SourceUsername      *string `json:"source_username"`
}

// ChangePasswordRequest defines model for ChangePasswordRequest.
type ChangePasswordRequest struct {
	Password string `json:"password"`
}

// DashboardDataset defines model for DashboardDataset.
type DashboardDataset struct {
	BackgroundColor []string `json:"backgroundColor"`
	Data            []int32  `json:"data"`
}

// DashboardStats defines model for DashboardStats.
type DashboardStats map[string]DashboardStatsItem

// DashboardStatsItem defines model for DashboardStatsItem.
type DashboardStatsItem struct {
	Datasets []DashboardDataset `json:"datasets"`
	Labels   []string           `json:"labels"`
}

// DashboardStatus defines model for DashboardStatus.
type DashboardStatus struct {
	Healthy bool `json:"healthy"`
}

// DashboardVersion defines model for DashboardVersion.
type DashboardVersion struct {
	Version string `json:"version"`
}

// Domain defines model for Domain.
type Domain struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *int32     `json:"id,omitempty"`
	Name      string     `json:"name" validate:"hostname"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// DomainList defines model for DomainList.
type DomainList struct {
	Items []Domain `json:"items"`
}

// DomainMergePatchUpdate defines model for DomainMergePatchUpdate.
type DomainMergePatchUpdate struct {
	Name *string `json:"name,omitempty" validate:"hostname"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Error   string `json:"error"`
	Message string `json:"message"`
}

// TLSPolicy defines model for TLSPolicy.
type TLSPolicy struct {
	Domain   *Domain         `json:"domain,omitempty"`
	DomainId int32           `json:"domain_id"`
	Id       *int32          `json:"id,omitempty"`
	Params   *string         `json:"params,omitempty"`
	Policy   TLSPolicyPolicy `json:"policy"`
}

// TLSPolicyPolicy defines model for TLSPolicy.Policy.
type TLSPolicyPolicy string

// TLSPolicyList defines model for TLSPolicyList.
type TLSPolicyList struct {
	Items []TLSPolicy `json:"items"`
}

// TLSPolicyMergePatchUpdate defines model for TLSPolicyMergePatchUpdate.
type TLSPolicyMergePatchUpdate struct {
	Params *string                          `json:"params"`
	Policy *TLSPolicyMergePatchUpdatePolicy `json:"policy,omitempty"`
}

// TLSPolicyMergePatchUpdatePolicy defines model for TLSPolicyMergePatchUpdate.Policy.
type TLSPolicyMergePatchUpdatePolicy string

// AccountsCreateJSONRequestBody defines body for AccountsCreate for application/json ContentType.
type AccountsCreateJSONRequestBody = AccountCreate

// AccountsUpdateApplicationMergePatchPlusJSONRequestBody defines body for AccountsUpdate for application/merge-patch+json ContentType.
type AccountsUpdateApplicationMergePatchPlusJSONRequestBody = AccountMergePatchUpdate

// AccountsChangePasswordJSONRequestBody defines body for AccountsChangePassword for application/json ContentType.
type AccountsChangePasswordJSONRequestBody = ChangePasswordRequest

// AliasesCreateJSONRequestBody defines body for AliasesCreate for application/json ContentType.
type AliasesCreateJSONRequestBody = Alias

// AliasesUpdateApplicationMergePatchPlusJSONRequestBody defines body for AliasesUpdate for application/merge-patch+json ContentType.
type AliasesUpdateApplicationMergePatchPlusJSONRequestBody = AliasMergePatchUpdate

// DomainsCreateJSONRequestBody defines body for DomainsCreate for application/json ContentType.
type DomainsCreateJSONRequestBody = Domain

// DomainsUpdateApplicationMergePatchPlusJSONRequestBody defines body for DomainsUpdate for application/merge-patch+json ContentType.
type DomainsUpdateApplicationMergePatchPlusJSONRequestBody = DomainMergePatchUpdate

// TLSPoliciesCreateJSONRequestBody defines body for TLSPoliciesCreate for application/json ContentType.
type TLSPoliciesCreateJSONRequestBody = TLSPolicy

// TLSPoliciesUpdateApplicationMergePatchPlusJSONRequestBody defines body for TLSPoliciesUpdate for application/merge-patch+json ContentType.
type TLSPoliciesUpdateApplicationMergePatchPlusJSONRequestBody = TLSPolicyMergePatchUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /account)
	AccountsList(w http.ResponseWriter, r *http.Request)

	// (POST /account)
	AccountsCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /account/{id})
	AccountsDelete(w http.ResponseWriter, r *http.Request, id int32)

	// (GET /account/{id})
	AccountsRead(w http.ResponseWriter, r *http.Request, id int32)

	// (PATCH /account/{id})
	AccountsUpdate(w http.ResponseWriter, r *http.Request, id int32)

	// (PUT /account/{id}/password)
	AccountsChangePassword(w http.ResponseWriter, r *http.Request, id int32)

	// (GET /alias)
	AliasesList(w http.ResponseWriter, r *http.Request)

	// (POST /alias)
	AliasesCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /alias/{id})
	AliasesDelete(w http.ResponseWriter, r *http.Request, id int32)

	// (GET /alias/{id})
	AliasesRead(w http.ResponseWriter, r *http.Request, id int32)

	// (PATCH /alias/{id})
	AliasesUpdate(w http.ResponseWriter, r *http.Request, id int32)

	// (GET /domain)
	DomainsList(w http.ResponseWriter, r *http.Request)

	// (POST /domain)
	DomainsCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /domain/{id})
	DomainsDelete(w http.ResponseWriter, r *http.Request, id int32)

	// (GET /domain/{id})
	DomainsRead(w http.ResponseWriter, r *http.Request, id int32)

	// (PATCH /domain/{id})
	DomainsUpdate(w http.ResponseWriter, r *http.Request, id int32)

	// (POST /logout)
	UserOperationsLogout(w http.ResponseWriter, r *http.Request)

	// (GET /stats)
	DashboardOperationsStats(w http.ResponseWriter, r *http.Request)

	// (GET /status)
	DashboardOperationsStatus(w http.ResponseWriter, r *http.Request)

	// (GET /tlspolicy)
	TLSPoliciesList(w http.ResponseWriter, r *http.Request)

	// (POST /tlspolicy)
	TLSPoliciesCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /tlspolicy/{id})
	TLSPoliciesDelete(w http.ResponseWriter, r *http.Request, id int32)

	// (GET /tlspolicy/{id})
	TLSPoliciesRead(w http.ResponseWriter, r *http.Request, id int32)

	// (PATCH /tlspolicy/{id})
	TLSPoliciesUpdate(w http.ResponseWriter, r *http.Request, id int32)

	// (GET /version)
	DashboardOperationsVersion(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /account)
func (_ Unimplemented) AccountsList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /account)
func (_ Unimplemented) AccountsCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /account/{id})
func (_ Unimplemented) AccountsDelete(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /account/{id})
func (_ Unimplemented) AccountsRead(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /account/{id})
func (_ Unimplemented) AccountsUpdate(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /account/{id}/password)
func (_ Unimplemented) AccountsChangePassword(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /alias)
func (_ Unimplemented) AliasesList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /alias)
func (_ Unimplemented) AliasesCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /alias/{id})
func (_ Unimplemented) AliasesDelete(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /alias/{id})
func (_ Unimplemented) AliasesRead(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /alias/{id})
func (_ Unimplemented) AliasesUpdate(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /domain)
func (_ Unimplemented) DomainsList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /domain)
func (_ Unimplemented) DomainsCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /domain/{id})
func (_ Unimplemented) DomainsDelete(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /domain/{id})
func (_ Unimplemented) DomainsRead(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /domain/{id})
func (_ Unimplemented) DomainsUpdate(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /logout)
func (_ Unimplemented) UserOperationsLogout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /stats)
func (_ Unimplemented) DashboardOperationsStats(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /status)
func (_ Unimplemented) DashboardOperationsStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /tlspolicy)
func (_ Unimplemented) TLSPoliciesList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /tlspolicy)
func (_ Unimplemented) TLSPoliciesCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /tlspolicy/{id})
func (_ Unimplemented) TLSPoliciesDelete(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /tlspolicy/{id})
func (_ Unimplemented) TLSPoliciesRead(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /tlspolicy/{id})
func (_ Unimplemented) TLSPoliciesUpdate(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /version)
func (_ Unimplemented) DashboardOperationsVersion(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AccountsList operation middleware
func (siw *ServerInterfaceWrapper) AccountsList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AccountsList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AccountsCreate operation middleware
func (siw *ServerInterfaceWrapper) AccountsCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AccountsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AccountsDelete operation middleware
func (siw *ServerInterfaceWrapper) AccountsDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AccountsDelete(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AccountsRead operation middleware
func (siw *ServerInterfaceWrapper) AccountsRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AccountsRead(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AccountsUpdate operation middleware
func (siw *ServerInterfaceWrapper) AccountsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AccountsUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AccountsChangePassword operation middleware
func (siw *ServerInterfaceWrapper) AccountsChangePassword(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AccountsChangePassword(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AliasesList operation middleware
func (siw *ServerInterfaceWrapper) AliasesList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AliasesList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AliasesCreate operation middleware
func (siw *ServerInterfaceWrapper) AliasesCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AliasesCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AliasesDelete operation middleware
func (siw *ServerInterfaceWrapper) AliasesDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AliasesDelete(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AliasesRead operation middleware
func (siw *ServerInterfaceWrapper) AliasesRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AliasesRead(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AliasesUpdate operation middleware
func (siw *ServerInterfaceWrapper) AliasesUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AliasesUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DomainsList operation middleware
func (siw *ServerInterfaceWrapper) DomainsList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DomainsList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DomainsCreate operation middleware
func (siw *ServerInterfaceWrapper) DomainsCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DomainsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DomainsDelete operation middleware
func (siw *ServerInterfaceWrapper) DomainsDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DomainsDelete(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DomainsRead operation middleware
func (siw *ServerInterfaceWrapper) DomainsRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DomainsRead(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DomainsUpdate operation middleware
func (siw *ServerInterfaceWrapper) DomainsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DomainsUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UserOperationsLogout operation middleware
func (siw *ServerInterfaceWrapper) UserOperationsLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserOperationsLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DashboardOperationsStats operation middleware
func (siw *ServerInterfaceWrapper) DashboardOperationsStats(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DashboardOperationsStats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DashboardOperationsStatus operation middleware
func (siw *ServerInterfaceWrapper) DashboardOperationsStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DashboardOperationsStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TLSPoliciesList operation middleware
func (siw *ServerInterfaceWrapper) TLSPoliciesList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TLSPoliciesList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TLSPoliciesCreate operation middleware
func (siw *ServerInterfaceWrapper) TLSPoliciesCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TLSPoliciesCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TLSPoliciesDelete operation middleware
func (siw *ServerInterfaceWrapper) TLSPoliciesDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TLSPoliciesDelete(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TLSPoliciesRead operation middleware
func (siw *ServerInterfaceWrapper) TLSPoliciesRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TLSPoliciesRead(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TLSPoliciesUpdate operation middleware
func (siw *ServerInterfaceWrapper) TLSPoliciesUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TLSPoliciesUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DashboardOperationsVersion operation middleware
func (siw *ServerInterfaceWrapper) DashboardOperationsVersion(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DashboardOperationsVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/account", wrapper.AccountsList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/account", wrapper.AccountsCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/account/{id}", wrapper.AccountsDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/account/{id}", wrapper.AccountsRead)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/account/{id}", wrapper.AccountsUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/account/{id}/password", wrapper.AccountsChangePassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/alias", wrapper.AliasesList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/alias", wrapper.AliasesCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/alias/{id}", wrapper.AliasesDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/alias/{id}", wrapper.AliasesRead)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/alias/{id}", wrapper.AliasesUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/domain", wrapper.DomainsList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/domain", wrapper.DomainsCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/domain/{id}", wrapper.DomainsDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/domain/{id}", wrapper.DomainsRead)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/domain/{id}", wrapper.DomainsUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/logout", wrapper.UserOperationsLogout)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stats", wrapper.DashboardOperationsStats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.DashboardOperationsStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tlspolicy", wrapper.TLSPoliciesList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tlspolicy", wrapper.TLSPoliciesCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/tlspolicy/{id}", wrapper.TLSPoliciesDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tlspolicy/{id}", wrapper.TLSPoliciesRead)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/tlspolicy/{id}", wrapper.TLSPoliciesUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/version", wrapper.DashboardOperationsVersion)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
